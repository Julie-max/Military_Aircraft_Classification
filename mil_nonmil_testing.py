# -*- coding: utf-8 -*-
"""mil_nonmil_testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EQ6JYu-1CWJ93HrwqYpL-ANh_6ofcjLO
"""

import numpy as np
import tensorflow as tf
from PIL import Image
from picamera import PiCamera
from time import sleep

# Load the pre-trained model
model = tf.keras.models.load_model('path_to_your_pretrained_model.h5')

# Convert the model to TensorFlow Lite format
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the TensorFlow Lite model to a file
with open('airplane_classifier.tflite', 'wb') as f:
    f.write(tflite_model)

# Capture an image using the Raspberry Pi camera
def capture_image():
    camera = PiCamera()
    camera.start_preview()
    sleep(2)  # Wait for the camera to warm up
    input("Press Enter when ready to capture...")
    camera.capture('captured_image.jpg')
    camera.stop_preview()
    camera.close()

# Pre-process the image
def preprocess_image(image_path):
    image = Image.open(image_path)
    # Resize the image to fit model input size
    resized_image = image.resize((224, 224))
    # Normalize pixel values
    normalized_image = np.array(resized_image) / 255.0
    return normalized_image

# Perform inference on the pre-processed image
def classify_airplane(image_path):
    preprocessed_image = preprocess_image(image_path)
    interpreter = tf.lite.Interpreter(model_path="airplane_classifier.tflite")
    interpreter.allocate_tensors()
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    interpreter.set_tensor(input_details[0]['index'], np.expand_dims(preprocessed_image, axis=0))
    interpreter.invoke()
    output_data = interpreter.get_tensor(output_details[0]['index'])
    return output_data

# Post-process the model's output
def interpret_predictions(predictions):
    # Interpret the predictions to determine if it's a military or non-military airplane
    threshold = 0.5
    if predictions[0] > threshold:
        return "Military"
    else:
        return "Non-Military"

# Main function to capture image, perform inference, and interpret results
def main():
    capture_image()
    predictions = classify_airplane('captured_image.jpg')
    classification = interpret_predictions(predictions)
    print("Classification:", classification)

if __name__ == "__main__":
    main()