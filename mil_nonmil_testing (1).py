# -*- coding: utf-8 -*-
"""mil_nonmil_testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EQ6JYu-1CWJ93HrwqYpL-ANh_6ofcjLO
"""

import numpy as np
import tflite_runtime.interpreter as tflite
from PIL import Image
from picamera2 import Picamera2
import io
import os

# Load the TensorFlow Lite model
interpreter = tflite.Interpreter(model_path="path_to_your_tflite_model.tflite")
interpreter.allocate_tensors()

# Get input and output details
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Function to capture an image with a prompt
def capture_image():
    while True:
        user_input = input("Press Enter to capture an image ('q' to quit): ")
        if user_input.lower() == 'q':
            return None
        else:
            camera = Picamera2()
            camera.start_preview()
            input("Press Enter to capture...")  # Prompt before capturing
            camera.capture('captured_image.jpg')
            camera.stop_preview()
            camera.close()
            return 'captured_image.jpg'

# Function to preprocess the image
def preprocess_image(image_path):
    image = Image.open(image_path).convert("RGB")
    image = image.resize((224, 224))
    image = np.array(image) / 255.0
    return image

# Function to classify the image
def classify_airplane(image):
    # Preprocess the image
    input_data = preprocess_image(image)

    # Set input tensor
    input_index = input_details[0]['index']
    interpreter.set_tensor(input_index, [input_data])

    # Run inference
    interpreter.invoke()

    # Get output tensor
    output_index = output_details[0]['index']
    output_data = interpreter.get_tensor(output_index)

    # Interpret predictions
    threshold = 0.5
    if output_data[0][0] > threshold:
        return "Military"
    else:
        return "Non-Military"

# Main function
def main():
    while True:
        image_path = capture_image()
        if image_path is None:
            print("Exiting...")
            break

        # Display the captured image
        os.system("display captured_image.jpg")

        # Prompt user to keep or retake the image
        user_input = input("Keep this image? (y/n): ")
        if user_input.lower() == 'n':
            os.remove(image_path)
            print("Image discarded. Retaking...")
        else:
            # Perform inference
            classification = classify_airplane(image_path)
            print("Classification:", classification)

if __name__ == "__main__":
    main()